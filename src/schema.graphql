# Restrict what client can see about the User type
type User {
  email: String!
  username: String!
  firstName: String!
  lastName: String!
  friends: [PublicUser!]!
}

# Type that will be shown to users other than the type owner
type PublicUser {
  username: String!
  firstName: String!
  lastName: String!
}

type Chat {
  id: ID!
  title: String
  members: [PublicUser!]!
  messages: [Message!]!
}

# Needed otherwise graphql-yoga complains about missing type
scalar DateTime

type Message {
  id: ID!
  author: PublicUser!
  createdAt: DateTime!
  content: String!
}

type SuccessMessage {
  message: String
}

type Query {
  user: User!
  users: [PublicUser!]!
  chat(chatId: ID!): Chat!
  # Add more Prisma args (last, skip etc.)
  chats(first: Int): [Chat!]!
}

type Mutation {
  signup(
    email: String!
    username: String!
    firstName: String!
    lastName: String!
    password: String!
  ): User!
  signin(username: String!, password: String!): User!
  signout: SuccessMessage
  addFriend(username: String!): User!
  changeNames(firstName: String!, lastName: String!): User!
  # Think about verification, maybe add pass arg / email verification?
  changeEmail(email: String!): User!
  changeUsername(username: String!): User!
  # members = Array of user (friend) IDs
  # members should not contain the current user's ID
  # title = Optional chat title
  startChat(usernames: [String!]!, title: String): Chat!
  updateChatTitle(chatId: ID!, title: String!): Chat!
  addMemberToChat(chatId: ID!, username: String!): Chat!
  sendMessageToChat(chatId: ID!, content: String!): Chat!
}
